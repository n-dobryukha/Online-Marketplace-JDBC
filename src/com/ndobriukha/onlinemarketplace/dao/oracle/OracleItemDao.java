package com.ndobriukha.onlinemarketplace.dao.oracle;

import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.List;

import org.apache.commons.dbutils.QueryRunner;
import org.apache.commons.dbutils.handlers.BeanListHandler;

import com.ndobriukha.onlinemarketplace.dao.AbstractJdbcDao;
import com.ndobriukha.onlinemarketplace.dao.PersistException;
import com.ndobriukha.onlinemarketplace.dbutils.ItemRowProcessor;
import com.ndobriukha.onlinemarketplace.models.Item;

public class OracleItemDao extends AbstractJdbcDao<Item, Integer> {

	public OracleItemDao(Connection connection) {
		super(connection, Item.class, new ItemRowProcessor());
	}

	@Override
	public String[] getAutoGeneratedKeys() {
		return new String[] { "id", "sellerId", "description", "startPrice",
				"timeLeft", "startBidding", "buyItNow", "bidIncrement", "sold" };
	}

	@Override
	public String getSelectQuery() {
		return "SELECT id, sellerId, description, startPrice, timeLeft, startBidding, "
				+ "buyItNow, bidIncrement, sold FROM Items";
	}

	@Override
	public String getCreateQuery() {
		return "INSERT INTO Items "
				+ "(sellerId, description, startPrice, timeLeft, "
				+ "startBidding, buyItNow, bidIncrement, sold) "
				+ "VALUES(?, ?, ?, ?, ?, ?, ?, ?)";
	}

	@Override
	public String getUpdateQuery() {
		return "UPDATE Items SET "
				+ "sellerId = ?, description = ?, startPrice = ?, "
				+ "timeLeft = ?, startBidding = ?, buyItNow = ?, bidIncrement = ?, "
				+ "sold = ? "
				+ "WHERE id = ?";
	}

	@Override
	public String getDeleteQuery() {
		return "DELETE FROM Items WHERE id = ?";
	}

	public Item create(int sellerId, String description, double startPrice,
			int timeLeft, Timestamp startBidding, Item.BooleanType buyItNow,
			double bidIncrement) throws PersistException {
		Item item = new Item(sellerId, description, startPrice, timeLeft,
				startBidding, buyItNow, bidIncrement);
		return persist(item);
	}
	
	/**
	 * Retrieves items list by Description substring
	 * 
	 * @param substr
	 * @return
	 * @throws PersistException
	 */
	public List<Item> getItemsBySubstrDescr(String substr) throws PersistException {
		List<Item> result = null;
		String sql = getSelectQuery() + " WHERE description LIKE ?";
		QueryRunner query = new QueryRunner();
		BeanListHandler<Item> beanListHandler = new BeanListHandler<Item>(Item.class, new ItemRowProcessor());
		try {
			result = query.query(connection, sql, beanListHandler, "%" + substr + "%");
		} catch (SQLException e) {
			throw new PersistException(e);
		}
		return result;
	}

	/**
	 * Retrieves items list by Seller ID
	 * 
	 * @param selelrId
	 * @return
	 * @throws PersistException
	 */
	public List<Item> getItemsBySellerId(int selelrId) throws PersistException {
		List<Item> result = null;
		String sql = getSelectQuery() + " WHERE sellerId = ?";
		QueryRunner query = new QueryRunner();
		BeanListHandler<Item> beanListHandler = new BeanListHandler<Item>(Item.class, new ItemRowProcessor());
		try {
			result = query.query(connection, sql, beanListHandler, selelrId);
		} catch (SQLException e) {
			throw new PersistException(e);
		}
		return result;
	}
}
