package com.ndobriukha.onlinemarketplace.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import org.apache.commons.dbutils.QueryRunner;
import org.apache.commons.dbutils.ResultSetHandler;
import org.apache.commons.dbutils.handlers.BeanHandler;
import org.apache.commons.dbutils.handlers.BeanListHandler;

import com.ndobriukha.onlinemarketplace.models.Base;

public abstract class AbstractJdbcDao<T extends Identified<PK>, PK extends Integer>
		implements GenericDao<T, PK> {

	private Connection connection;

	public AbstractJdbcDao(Connection connection) {
		this.connection = connection;
	}

	public abstract String[] getAutoGeneratedKeys();

	public abstract String getSelectQuery();

	public abstract String getCreateQuery();

	public abstract String getUpdateQuery();

	public abstract String getDeleteQuery();

	@Override
	public T persist(T object) throws PersistException {
		if (object.getId() != null) {
			throw new PersistException("Object is already persist.");
		}
		T persistInstance;
		String sql = getCreateQuery();
		MyQueryRunner query = new MyQueryRunner(true);
		ResultSetHandler<T> resultHandler = new BeanHandler<T>(
				(Class<T>) object.getClass());
		String[] columnNames = getAutoGeneratedKeys();
		Object[] columnValues = ((Base) object).getFieldsValues();
		try {
			persistInstance = (T) query.insert(connection, sql, columnNames,
					resultHandler, columnValues);
		} catch (Exception e) {
			throw new PersistException(e);
		}
		return persistInstance;
	}

	public T getByPK(Integer key, Class<T> type) throws PersistException {
		List<T> list = null;
		String sql = getSelectQuery() + " WHERE id = ?";
		BeanListHandler<T> beanListHandler = new BeanListHandler<T>(type);
		QueryRunner query = new QueryRunner();
		try {
			list = query.query(connection, sql, beanListHandler, key);
		} catch (SQLException e) {
			throw new PersistException(e);
		}
		if (list == null || list.size() == 0) {
			return null;
		}
		if (list.size() > 1) {
			throw new PersistException("Received more than one record.");
		}						
		return list.get(0);
	}

	@Override
	public void update(T object) throws PersistException {
		String sql = getUpdateQuery();
		QueryRunner query = new QueryRunner();
		try {
			int count = query.update(connection, sql, ((Base) object).getFieldsValues(), object.getId());
			if (count != 1) {
				throw new PersistException(
						"On update modify more then 1 record: " + count);
			}
		} catch (SQLException e) {
			throw new PersistException(e);
		}
	}

	@Override
	public void delete(T object) throws PersistException {
		String sql = getDeleteQuery();
		try (PreparedStatement statement = connection.prepareStatement(sql)) {
			try {
				statement.setObject(1, object.getId());
			} catch (Exception e) {
				throw new PersistException(e);
			}
			int count = statement.executeUpdate();
			if (count != 1) {
				throw new PersistException(
						"On delete modify more then 1 record: " + count);
			}
			statement.close();
		} catch (Exception e) {
			throw new PersistException(e);
		}
	}

	@Override
	public List<T> getAll(Class<T> type) throws PersistException {
		List<T> list = null;
		String sql = getSelectQuery();
		BeanListHandler<T> beanListHandler = new BeanListHandler<T>(type);
		QueryRunner query = new QueryRunner();
		try {
			list = query.query(connection, sql, beanListHandler);
		} catch (SQLException e) {
			throw new PersistException(e);
		}
		return list;
	}
}
